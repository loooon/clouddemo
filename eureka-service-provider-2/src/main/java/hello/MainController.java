package hello;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import java.util.List;
import javax.transaction.Transactional;

@Controller    // This means that this class is a Controller
@RequestMapping(path = "/demo") // This means URL's start with /demo (after Application path)
public class MainController {
  @Autowired // This means to get the bean called userRepository
  // Which is auto-generated by Spring, we will use it to handle the data
  private UserRepository userRepository;

  @Autowired
  private MongoTestDao mtdao;

  @GetMapping(path = "/add") // Map ONLY GET Requests
  public @ResponseBody
  String addNewUser(@RequestParam String name
      , @RequestParam String email) {
    // @ResponseBody means the returned String is the response, not a view name
    // @RequestParam means it is a parameter from the GET or POST request

    User n = new User();
    n.setName(name);
    n.setEmail(email);
    userRepository.save(n);
    return "Saved";
  }

  @GetMapping(path = "/all")
  public @ResponseBody
  Iterable<User> getAllUsers() {
    // This returns a JSON or XML with the users
    return userRepository.findAll();
  }


  @GetMapping(path = "/findByName/{name}")
  public @ResponseBody
  List<User> findByName(@PathVariable String name) {
    // This returns a JSON or XML with the users
    return userRepository.findByName(name);
  }


  @GetMapping(path = "/findByName/{id}/{name}/{email}")
  public @ResponseBody
  List<User> findByNameAndEmailAndId(@PathVariable Integer id, @PathVariable String name, @PathVariable String email) {
    // This returns a JSON or XML with the users
    //    return userRepository.findByNameAndEmailAndId(id, name, email);
    return userRepository.findByMultiParam(name, email, id);
  }


  @GetMapping(path = "/updateName/{id}/{name}")
  public @ResponseBody
  @Transactional
  Integer setUserNameById(@PathVariable Integer id, @PathVariable String name) {
    // This returns a JSON or XML with the users
    return userRepository.setUserNameById(name, id);
  }


  /**
   * test mongodb
   */


  @GetMapping(path = "/test1")
  public void saveTest() throws Exception {
    MongoTest mgtest = new MongoTest();
    mgtest.setId(11);
    mgtest.setAge(33);
    mgtest.setName("ceshi");
    mtdao.saveTest(mgtest);
  }

  @GetMapping(value = "/test2")
  public MongoTest findTestByName() {
    MongoTest mgtest = mtdao.findTestByName("ceshi");
    System.out.println("mgtest is " + mgtest);
    return mgtest;
  }

  @GetMapping(value = "/test3")
  public void updateTest() {
    MongoTest mgtest = new MongoTest();
    mgtest.setId(11);
    mgtest.setAge(44);
    mgtest.setName("ceshi2");
    mtdao.updateTest(mgtest);
  }

  @GetMapping(value = "/test4")
  public void deleteTestById() {
    mtdao.deleteTestById(11);
  }

}